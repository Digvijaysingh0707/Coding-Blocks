import java.util.ArrayList;
class Graph{
    static  ArrayList<ArrayList<Integer>> graph;
    static  int v;
     public Graph(int nodes){
        this.v=nodes;
        graph=new ArrayList<ArrayList<Integer>>();
        for (int i=0;i<v;i++){
            graph.add(new ArrayList<>());
        }
    }
    static void add(int u,int v){
        graph.get(u).add(v);
        graph.get(v).add(u);
    }
    static void print(){
        for (int i=0;i<v;i++){
            System.out.println("NOde "+i);
            for (int x:graph.get(i)){
                System.out.println(x);
            }
        }
     }
    static boolean cycle_helper(int node,boolean visited[],int parent){
        visited[node]=true;
        for (int x:graph.get(node)){
            //Two cases
            if (!visited[x]){
                //go and recursively visit the node
                boolean cycle_mila=cycle_helper(x,visited,node);
                    if (cycle_mila){
                        return true;
                    } 
            }
            //node is visited but it should not be the parent
            else if (x!=parent){
                return true;
            }
        }
        return false;
    }
    static boolean conatainCycle(){
        boolean visited[]= new boolean[v];
       return cycle_helper(0,visited,-1);
    }
    public static void main(String[] args) {
        Graph g = new Graph(7);
        g.add(0,1);
        g.add(1,2);
        g.add(2,3);
        g.add(3,4);
        g.add(4,0);
        if (g.conatainCycle()){
            System.out.println("Yes");
        }
        else System.out.println("no");
     }
}

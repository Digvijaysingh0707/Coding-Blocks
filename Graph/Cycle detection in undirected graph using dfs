class Solution
{
    public boolean isCycle(int V, ArrayList<ArrayList<Integer>> adj)
    {
        // Code here
        boolean vis[]= new boolean[V];
        // return helper(0,vis,-1,adj);
        for(int i=0;i<V;i++){
            if(vis[i]==false){
                if(helper(i,vis,-1,adj))return true;
            }
        }
        return false;
    }
    public boolean helper(int node,boolean vis[],int par,ArrayList<ArrayList<Integer>> adj){
        vis[node]=true;
        Iterator<Integer> it =adj.get(node).iterator();
        while(it.hasNext()){
            int c=it.next();
            if(vis[c]==false){
                //recursively visit the node
                if(helper(c,vis, node,adj))return true;
            }
            //neighbour is visited but it should not be the parent
            else if(c!=par){
                return true;
            }
        }
        return false;
        
    }
}

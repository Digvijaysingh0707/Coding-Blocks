import java.util.ArrayList;
import java.util.Arrays;
class Graph{
    private final ArrayList<ArrayList<Integer>> graph;
    private final int v;
    public Graph(int nodes){
        this.v=nodes;
        graph=new ArrayList<ArrayList<Integer>>();
        for (int i=0;i<v;i++){
            graph.add(new ArrayList<>());
        }
    }
    private void add(int u,int v){
        graph.get(u).add(v);
        graph.get(v).add(u);
    }
    private void print(){
        for (int i=0;i<v;i++){
            System.out.println("NOde "+i);
            for (int x:graph.get(i)){
                System.out.println(x);
            }
        }

    }
    private boolean cycle_helper(int node,boolean visited[],boolean stack[]){
        //visit a node
        visited[node]=true;
        stack[node]=true;
        for (int x:graph.get(node)){
            if (stack[x]==true)
                return true;
            else if (visited[x]==false){
                boolean cycle_mila=cycle_helper(x,visited,stack);
                if (cycle_mila==true){
                    return true;
                }
            }
        }
        //leave a node
        stack[node]=false;
        return false;
    }
    private boolean conatainCycle(){
        boolean visited[]= new boolean[v];
        boolean stack[] = new boolean[v];
        Arrays.fill(visited,false);
        Arrays.fill(stack,false);
        return cycle_helper(0,visited,stack);
       
    }

    public static void main(String[] args) {
        Graph g = new Graph(7);
        g.add(0,1);
        g.add(1,2);
        g.add(2,3);
        g.add(3,4);
        g.add(4,5);
        g.add(1,5);
        g.add(5,6);
        g.add(4,2);
        if (g.conatainCycle()){
            System.out.println("Yes");
        }
        else System.out.println("no");


    }

}

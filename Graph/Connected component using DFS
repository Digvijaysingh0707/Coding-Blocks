Complexity isO(V+E)
https://www.youtube.com/watch?v=Zi4NoNyF_4I

package Graph;

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Queue;

class Graph{
    ArrayList<ArrayList<Integer>> graph;
    int V; //no of nodes or vertices
    Graph(int nodes){
        V=nodes;
        graph=new ArrayList<ArrayList<Integer>>();
        for (int i=0;i<V;i++){
            graph.add(new ArrayList<Integer>());
        }
    }
    void addEdge(int u,int v){
        graph.get(v).add(u);
        graph.get(u).add(v);
    }
    
    
    void DfsUtil(int node,boolean visited[]){
        visited[node]=true;
//        System.out.print(node+" ");
        for (int x:graph.get(node)){
            if (visited[x]==false){
                DfsUtil(x,visited);
            }
        }
    }
    void DFS(int start){
        boolean visited[]= new boolean[V];
//        System.out.print("DFS traversal of graph:-");
        DfsUtil(start,visited);

    }
     int count(){
        int count=0;
        boolean v[]= new boolean[V];
        for (int i=0;i<v.length;i++){
            if (v[i]==false){
                v[i]=true;
                DfsUtil(i,v);
                count++;
            }
        }
        return count;

    }


    public static void main(String[] args)
    {
       Graph g= new Graph(9);
       g.addEdge(0,1);
        g.addEdge(0,3);
        g.addEdge(1,2);
        g.addEdge(2,3);
//        g.addEdge(4,5);
//        g.addEdge(5,6);
//        g.addEdge(7,8);
        int ans=g.count();
        System.out.println(ans);
    }
}




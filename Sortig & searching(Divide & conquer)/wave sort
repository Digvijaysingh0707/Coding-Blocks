First sort the given array
the pick last lement and firdt element to print in wave form
but this will not be very efficient and complexity will be O(nlog n)

package com.company;

import java.util.Arrays;
import java.util.Scanner;

public class Main {
    static void swap(int arr[],int a,int b){
        int temp =arr[a];
        arr[a]=arr[b];
        arr[b]=temp;
    }
    static void sortINwave(int arr[],int n){
        Arrays.sort(arr);
        for(int i =0;i<n-1;i+=2){
            swap(arr,i,i+1);
        }
    }

    public static void main(String[] args) {
       int arr[]= {10, 90, 49, 2, 1, 5, 23};
       int n = arr.length;
       sortINwave(arr,n);
       for(int e:arr){
           System.out.print(e);
       }
    }
}



Another approach:
Swap the adjacent element to create peak and depression


#include<iostream>
using namespace std;
int main(){
    int a[] = {1,3,4,2,7,8,5,9,36};
    int n = sizeof(a)/sizeof(int);
    for(int i = 0;i<n;i+=2){
            //check for the left element and try to create the peak
        if(i>0&&a[i-1]>a[i]){
            swap(a[i],a[i-1]);
        }
    //check for the right element
        if(i<n-1&&a[i+1]>a[i]){
            swap(a[i],a[i+1]);
        }
    }
    for(int i =0;i<n;i++){
        cout<<a[i]<<" ";
    }
    return 0;
}
complexity is O(n)

//Java code
package com.company;

import java.util.Scanner;

public class Main {

    public static void main(String[] args) {
       int arr[]= {1,7,2,1,3,5};
       int n = arr.length;
       for(int i=0;i<n;i+=2){
           if(i>0&&arr[i-1]>arr[i]){
               int temp=arr[i-1];
               arr[i-1]=arr[i];
               arr[i]=temp;
           }
           if(i<n-1&&arr[i+1]>arr[i]){
               int temp=arr[i+1];
               arr[i+1]=arr[i];
               arr[i]=temp;
           }
       }
       for(int e:arr){
           System.out.print(e);
       }
    }
}

when the f array is sorted the it takes O(n) time
sort the activities according to finish time
always pick the first activity


// The following implementation assumes that the activities 
// are already sorted according to their finish time 
import java.util.*; 
import java.lang.*; 
import java.io.*; 

class ActivitySelection 
{ 
	// Prints a maximum set of activities that can be done by a single 
	// person, one at a time. 
	// n --> Total number of activities 
	// s[] --> An array that contains start time of all activities 
	// f[] --> An array that contains finish time of all activities 
	public static void printMaxActivities(int s[], int f[], int n) 
	{ 
	int i, j; 
	
	System.out.print("Following activities are selected : n"); 
	
	// The first activity always gets selected 
	i = 0; 
	System.out.print(i+" "); 
	
	// Consider rest of the activities 
	for (j = 1; j < n; j++) 
	{ 
		// If this activity has start time greater than or 
		// equal to the finish time of previously selected 
		// activity, then select it 
		if (s[j] >= f[i]) 
		{ 
			System.out.print(j+" "); 
			i = j; 
		} 
	} 
	} 
	
	// driver program to test above function 
	public static void main(String[] args) 
	{ 
	int s[] = {1, 3, 0, 5, 8, 5}; 
	int f[] = {2, 4, 6, 7, 9, 9}; 
	int n = s.length; 
		
	printMaxActivities(s, f, n); 
	} 
	
} 

Another  approach:-
package Greedy;

import java.lang.reflect.Array;
import java.util.Arrays;
import java.util.Comparator;
import java.util.Scanner;

public class Activity {
    static private class Pair {
        int first;
        int second;

        Pair(int a, int b) {
            first = a;
            second = b;
        }
    }
    

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int testCases = sc.nextInt();
        while (testCases-- > 0) {
            int n = sc.nextInt();
            Pair[] arr = new Pair[n];
            for (int i = 0; i < n; i++) {
                arr[i] = new Pair(sc.nextInt(), sc.nextInt());
            }

            Arrays.sort(arr, (a, b) -> {
                return a.second - b.second;
            });
            
            int ans = 1, chosen = 0;
            for (int i = 1; i < n; i++) {
                if (arr[i].first >= arr[chosen].second) {
                    ans++;
                    chosen = i;
                }
            }
            System.out.println(ans);
        }
    }
}
}

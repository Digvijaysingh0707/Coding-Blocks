Finding transpose of a matrix





private static void transpose(int arr[][]) {
       for (int i = 0; i < arr.length; i++) {
           for (int j = i; j < arr[0].length; j++) {
               int temp = arr[i][j];
               arr[i][j] = arr[j][i];
               arr[j][i] = temp;
           }
       }
   }


   private static void print(int arr[][]){
       for(int i =0;i<arr.length;i++){
           for(int j =0;j < arr[0].length;j++) {
               System.out.print(arr[i][j] + " ");
           }
               System.out.print("\n");
           }
       }



    public static void main(String[] args) {
        int arr[][]={{1,2,3,40},
                {5,6,7,8},
                {9,10,11,12},
                {13,14,15,16}};
        transpose(arr);
        print(arr);

    }
}

Left rotation of ar array by 90

There are two steps :

1. Find transpose of matrix.
2. Reverse columns of the transpose.

Time Complexity = O(R*C)
Space Complexity = O(1)

 
 
 private static void transpose(int arr[][]) {
       for (int i = 0; i < arr.length; i++) {
           for (int j = i; j < arr[0].length; j++) {
               int temp = arr[i][j];
               arr[i][j] = arr[j][i];
               arr[j][i] = temp;
           }
       }
   }
    private static void reverseColoumns(int arr[][]) {
        for (int i = 0; i < arr[0].length; i++) {
            for (int j = 0, k = arr[0].length - 1; j < k; j++, k--) {
                int temp = arr[j][i];
                arr[j][i] = arr[k][i];
                arr[k][i] = temp;
            }
        }
    }


   private static void print(int arr[][]){
       for(int i =0;i<arr.length;i++){
           for(int j =0;j < arr[0].length;j++) {
               System.out.print(arr[i][j] + " ");
           }
               System.out.print("\n");
           }
       }
       


            static void leftRotation(int arr[][]){
       transpose(arr);
       reverseColoumns(arr);

           }


    public static void main(String[] args) {
        int arr[][]={{1,2,3,40},
                {5,6,7,8},
                {9,10,11,12},
                {13,14,15,16}};
        leftRotation(arr);
        print(arr);

    }
}


For Right Rotation

There are two steps :

1. Find transpose of matrix.
2. Reverse columns of the transpose.

Time Complexity = O(R*C)
Space Complexity = O(1)




private static void transpose(int arr[][]) {
       for (int i = 0; i < arr.length; i++) {
           for (int j = i; j < arr[0].length; j++) {
               int temp = arr[i][j];
               arr[i][j] = arr[j][i];
               arr[j][i] = temp;
           }
       }
   }
    private static void reverseColoumns(int arr[][]) {
        for (int i = 0; i < arr[0].length; i++) {
            for (int j = 0, k = arr[0].length - 1; j < k; j++, k--) {
                int temp = arr[j][i];
                arr[j][i] =//Right rotation arr[i][k];
                arr[i][k] = temp;
            }
        }
    }


   private static void print(int arr[][]){
       for(int i =0;i<arr.length;i++){
           for(int j =0;j < arr[0].length;j++) {
               System.out.print(arr[i][j] + " ");
           }
               System.out.print("\n");
           }
       }



            static void RightRotation(int arr[][]){
       transpose(arr);
       reverseColoumns(arr);

           }


    public static void main(String[] args) {
        int arr[][]={{1,2,3},
                     {4,5,6},
                {7,8,9},
                };
        RightRotation(arr);
        print(arr);

    }
}


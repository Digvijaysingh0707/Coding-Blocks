First sort the given array
the pick last lement and firdt element to print in wave form
but this will not be very efficient and complexity will be O(nlog n)

//Approach 1 First sort the input array, then swap all adjacent elements.
The time complexity of the solution is O(nLogn)

package com.company;

import java.util.Arrays;
import java.util.Scanner;

public class Main {
    static void swap(int arr[],int a,int b){
        int temp =arr[a];
        arr[a]=arr[b];
        arr[b]=temp;
    }
    static void sortINwave(int arr[],int n){
        Arrays.sort(arr);
        for(int i =0;i<n-1;i+=2){
            swap(arr,i,i+1);
        }
    }

    public static void main(String[] args) {
       int arr[]= {10, 90, 49, 2, 1, 5, 23};
       int n = arr.length;
       sortINwave(arr,n);
       for(int e:arr){
           System.out.print(e);
       }
    }
}



Another approach:
This can be done in O(n) time by doing a single traversal of given array. 
The idea is based on the fact that if we make sure that all even positioned (at index 0, 2, 4, ..) elements are greater
than their adjacent odd elements, we don’t need to worry about odd positioned element. Following are simple steps.
1) Traverse all even positioned elements of input array, and do following.
….a) If current element is smaller than previous odd element, swap previous and current.
….b) If current element is smaller than next odd element, swap next and current.






package com.company;

import java.util.Scanner;

public class Main {

    public static void main(String[] args) {
       int arr[]= {1,7,2,1,3,5};
       int n = arr.length;
       for(int i=0;i<n;i+=2){
           if(i>0&&arr[i-1]>arr[i]){
               int temp=arr[i-1];
               arr[i-1]=arr[i];
               arr[i]=temp;
           }
           if(i<n-1&&arr[i+1]>arr[i]){
               int temp=arr[i+1];
               arr[i+1]=arr[i];
               arr[i]=temp;
           }
       }
       for(int e:arr){
           System.out.print(e);
       }
    }
}

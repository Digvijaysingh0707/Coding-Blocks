package com.company;
import java.security.KeyPair;
import java.util.*;

public class Main {
        static int merge(int a[],int s, int e){
            int mid=(s+e)/2;
            int i=s;
            int j=mid+1;
            int k=s;//point at starting of temporary array
            int temp[] = new int[100];
            int count=0;//count no 0f croosInversion
            while (i<=mid&&j<=e) {
                if (a[i] <= a[j]) {
                    temp[k] = a[i];
                    k++;
                    i++;
                } else {
                    temp[k] = a[j];
                    k++;
                    j++;
                    count += mid - i + 1;
                }
            }
                while (i<=mid){
                    temp[k++]=a[i++];
                }
                while (j<=e){
                    temp[k++]=a[j++];
                }
                for (i=s;i<=e;i++){
                    a[i]=temp[i];
                }
                return count;
            }


        static int InversionCount(int a[],int s,int e){
            // Bae case 0 or 1 elemnet
            if(s>=e){
                return 0;
            }
            //Follow 3 steps
            //1 divide
            int mid =(s+e)/2;
            int x=InversionCount(a,s,mid);
            int y=InversionCount(a,mid+1,e);
            int z=merge(a,s,e);//crossInversion
            return x+y+z;
        }


        public static void main(String[] args) {
            Scanner sc = new Scanner(System.in);
            int n = sc.nextInt();
            int a[]= new int[n];
            for (int i=0;i<n;i++){
                a[i]=sc.nextInt();
            }

            System.out.print(InversionCount(a,0,n-1));





        }
    }










/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public TreeNode lca(TreeNode root, int p, int q) {
        if(root==null)return null;
        if(root.val==p||root.val==q){
            return root;
        }
        TreeNode leftans=lowestCommonAncestor(root.left,p,q);
        TreeNode rightans=lowestCommonAncestor(root.right,p,q);
        if(leftans!=null&&rightans!=null)return root;
        if(leftans!=null)return leftans;
        return rightans;
        
    }
    static int search(TreeNode root,int key,int level){
        if(root==null)return -1;
        if(root.val==key)return level;
        int left=search(root.left,key,level+1);
        if(left!=-1)return left;
        return search(root.right,key,level+1);
        
    }
    public int minDiffInBST(TreeNode root,int a,int b) {
        TreeNode lca_node=lca(root,a,b);
        int l1=lca(lca,a);
        int l2=lca(lca,b);
        return l1+l2;
    }
}

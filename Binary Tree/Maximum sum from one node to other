For each node there can be four ways that the max path goes through the node:
1. Node only
2. Max path through Left Child + Node
3. Max path through Right Child + Node
4. Max path through Left Child + Node + Max path through Right Child

The idea is to keep trace of four paths and pick up the max one in the end. An important thing to note is, root of every subtree need 
to return maximum path sum such that at most one child of root is involved. This is needed for parent function call. In below code, 
this sum is stored in ‘max_single’ and returned by the recursive function.


package Tree;

import com.sun.source.tree.Tree;

class TreeNode{
    int data;
    TreeNode left,right;
    TreeNode(int data){
        this.data=data;
    }
}
public class MAXPathSum {
    static int globalMax=Integer.MIN_VALUE;
    static int maxPathNode2Node(TreeNode root){
        //Base case
        if (root==null)return 0;
        //Recursive case
        int ls=maxPathNode2Node(root.left);//LST
        int rs=maxPathNode2Node(root.right);//RST
        //self work
        int case1=root.data;
        int case2=root.data+ls;
        int case3=root.data+ls+rs;
        int case4=root.data+rs;
        globalMax=Math.max(case1,Math.max(case2,Math.max(case3,Math.max(case4,globalMax))));
        return Math.max(ls,Math.max(rs,0))+root.data;

    }

}

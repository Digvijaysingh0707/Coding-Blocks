You are given a sorted data of n integers. You have to form a balanced Binary Search Tree and then print preorder traversal of the tree.

Input Format
First line contains integer t as number of test cases.
Each test case contains following input. First line contains integer n which represents the length of the data and next line contains n 
space separated integers denoting the elements for the BST.

Constraints
1 < t < 100
1< n < 1000

Output Format
For each testcase , print the preorder traversal of the BST in a new line.

Sample Input
1
7
1 2 3 4 5 6 7
Sample Output
4 2 1 3 6 5 7
Explanation
The tree looks like

             4
          /      \
       2           6
    /     \      /    \
   1       3    5      7
We print the preorder of the final tree.






package com.company;


import java.util.Scanner;

// Data structure to store a Binary Tree node
class Node {
    int data;
    Node left = null, right = null;

    Node(int data) {
        this.data = data;
    }
}

class Main {
    static Node ArrayToBst(int a[], int s, int e) {
        if (s > e) {
            return null;
        }
        int mid = (s + e) / 2;
        Node node = new Node(a[mid]);
        node.left = ArrayToBst(a, s, mid - 1);
        node.right = ArrayToBst(a, mid + 1, e);
        return node;
    }

    static void preOrder(Node node) {
        if (node == null) {
            return;
        }
        System.out.println(node.data);
        preOrder(node.left);
        preOrder(node.right);
    }

    public static void main(String[] args) {

        Scanner sc = new Scanner(System.in);
        int t = sc.nextInt();

        while (t-- >= 1) {
            int n = sc.nextInt();
            int a[] = new int[n];
            for (int i = 0; i < n; i++) {
                a[i] = sc.nextInt();
            }
            Node root = ArrayToBst(a, 0, n - 1);
            preOrder(root);


        }
    }
}

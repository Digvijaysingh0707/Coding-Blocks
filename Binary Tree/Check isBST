the value of a node should be greater than min valueof left subtree and greater than maximum value of right subtree
complexity is O(n)

Link:-https://www.geeksforgeeks.org/a-program-to-check-if-a-binary-tree-is-bst-or-not/



import java.util.LinkedList;
import java.util.Queue;
import java.util.Scanner;

public class Node {
    int key;
    Node left,right;
    public Node(int item){
        this.key=item;
        left=right=null;

    }
}

class  BinaryTree{
    static Node root;
    BinaryTree(){
        root=null;
    }

    static boolean isBST(){
        return isBSTUtil(root,Integer.MIN_VALUE,Integer.MAX_VALUE);
    }
    static boolean isBSTUtil(Node root,int min,int max){
        if(root==null){
            return true;
        }
       if(root.key>=min && root.key<=max && isBSTUtil(root.left,min,root.key)&&isBSTUtil(root.right,root.key,max)){
           return true;
       }
       return false;
    }








    public static void main(String[] args) {
       BinaryTree tree = new BinaryTree();


        tree.root = new Node(4);
        tree.root.left = new Node(2);
        tree.root.right = new Node(5);
        tree.root.left.left = new Node(1);
        tree.root.left.right = new Node(3);


        if(tree.isBST()){
           System.out.print("Yes");
       }
       else{
           System.out.print("No");
       }
    }
}

Based on divide & conquer:- divide the array into 2 prts,sort each part & merges them
complexity is O(nlog n)



package Recursion;

import java.util.Scanner;

public class MergeSort {
    static void merge(int[] a,int s,int e){
        //For merging both the parts
        int mid=(s+e)/2;
        int i =s;
        int j=mid+1;
        int k=s;
        int[] temp={0};
        while (i<=mid&&j<=e){
            if(a[i]<a[j]){
                temp[k++]=a[i++];
            }
            else{
                temp[k++]=a[j++];
            }
        }
        //suppose j part gets exhausted
        while(i<=mid){
            temp[k++]=a[i++];
        }
        //suppose i part gets exhausted
        while(j<=e){
            temp[k++]=a[j++];
        }//copy all the elemnt back to "a" array
        for( i=s;i<=e;i++){
            a[i]=temp[i];
        }

    }
    static void mergeSort(int[] a,int s,int e){
        //base case when array has 1or 0 element
        if(s>=e)
            return;
        //Follow 3 steps
        //1.Divide
        int mid=(s+e)/2;
        //2.Sort the two parts recursively
        mergeSort(a,s,mid);
        mergeSort(a,mid+1,e);
        //3. merge both the parts
        merge(a,s,e);
    }

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int size=sc.nextInt();
        int[] arr = new int[size];
        for(int i =0;i<size;i++){
            arr[i]=sc.nextInt();
        }
        mergeSort(arr,0,size-1);
        for (int i =0;i<size;i++){
            System.out.print(arr[i]+" ");
        }
    }
}



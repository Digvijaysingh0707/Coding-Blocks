Divide the array into 2 parts about the element called pivot element
divide and conquer
O(nlog n) time in average case
n*n in worst case(when the given array is already sorted, to overcome this we use randomised quicksort)
inplace sorting algo
choose a pivot element at the end an put it at the correct position
before pivot point put samller element and after pivot put larger element
//Not faster


package Recursion;

import java.util.Queue;

public class QuickSort {
    static int partition(int a[],int s,int e){
        //Inplace(can't take extra array)
        int i=s-1;//i=-1 as initially we dont have any smaller regio
        int j=s;
        int pivot=a[e];
        for (;j<=e-1;){
            if (a[j] <= pivot) {
                //merge the smaller element in the region 1
                i=i+1;
                int temp=a[j];
                a[j]=a[i];
                a[i]=temp;
            }
            //expand the larger element in the correct index
            j=j+1;
        }
        //place the pivot element in correct index
        int temp=a[i+1];
        a[i+1]=a[e];
        a[e]=temp;
        return i+1;

    }
    static void QuickSort(int a[],int s,int e){
        //base case
        if (s>=e)return;
        int p=partition(a,s,e);
        //left case
        QuickSort(a,s,p-1);
        //Right part
        QuickSort(a,p+1,e);
    }
    public static void main(String[] args) {
        int a[]={2,7,8,6,1,5,4};
        int n=a.length;
        QuickSort(a,0,n-1);
        for (int i=0;i<n;i++){
            System.out.print(a[i]+" ");
        }


    }
}

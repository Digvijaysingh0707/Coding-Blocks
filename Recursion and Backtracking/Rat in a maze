//Given m n matrix and some cells rae blocked
//find path from src to destination
//print all posible path
//rat can move only forward and downwara
package Recursion;

import java.sql.Array;
import java.util.Arrays;

public class RatInMaze {
    static boolean ratInMaze(char maze[][],int sol[][],int i,int j,int m,int n){
        if (i==m&&j==n){
            sol[m][n]=1;
            //Print the path
            for ( i=0;i<=m;i++){
                for (j=0;j<=n;j++){
                    System.out.print(sol[i][j]+" ");
                }
                System.out.println();

            }
            System.out.println();
            return true;
        }
        //Rat should be inside the grid
        if (i>m||j>n){
            return false;
        }
        if (maze[i][j]=='X'){//if cell is blocked
            return false;
        }
        //Assume solution exist through current cell
        sol[i][j]=1;
        boolean rightSuccess=ratInMaze(maze,sol,i,j+1,m,n);//going forward
        boolean downSuccess=ratInMaze(maze,sol,i+1,j,m,n);//going downward and we are calling both diretions because we want total number of paths
        //backtrack
        sol[i][j]=0;
        if (rightSuccess||downSuccess){
            return true;
        }
        return false;
    }
    public static void main(String[] args) {
        char mazee[][]={{'0','0','0','0'},
                {'0','0','X','0'},
                {'0','0','0','X'},
                {'0','X','0','0'}};
        int sol[][]=new int[10][10];
        for (int[] a:sol){
            Arrays.fill(a,0);
        }
        int m=4;
        int n=4;
        boolean ans= ratInMaze(mazee,sol,0,0,m-1,n-1);
        if (ans==false){
            System.out.print("Path does not exist");
        }


    }

}

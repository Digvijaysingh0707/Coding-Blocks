package Recursion;

public class SudokoSolver {
    static boolean canPlace(int mat[][],int i,int j,int n,int number){
        //check for row and col
        for (int x=0;x<n;x++){
            if (mat[x][j]==number||mat[i][x]==number){
                return false;
            }
        }
        //check for subgrid
        int rn=(int)Math.sqrt(n);
        int sx=(i/rn)*rn;
        int sy=(j/rn)*rn;
        for (int x=sx;x<sx+rn;x++){
            for (int y=sy;y<sy+rn;y++){
                if (mat[x][y]==number){
                    return false;
                }
            }
        }
        return true;

    }
    static boolean solvesudoko(int mat[][],int i,int j,int n){
        //Base case
        if (i==n){
            //Print the matrix
            for ( i=0;i<n;i++){
                for (j=0;j<n;j++){
                    System.out.print(mat[i][j]+" ");
                }
                System.out.println();
            }
            return true;
        }
        //Case row end
        if (j==n){
            return solvesudoko(mat,i+1,0,n);
        }
        //skip the prefilled cells
        if (mat[i][j]!=0){
            return solvesudoko(mat,i,j+1,n);
        }
        //Rec case
        //Fill the current cell with possible options
        for (int number=1;number<=n;number++){
            if (canPlace(mat,i,j,n,number)){
                mat[i][j]=number;
                boolean cansolve=solvesudoko(mat,i,j+1,n);
                if (cansolve==true)return true;
            }
        }
        //Backtrack here
        mat[i][j]=0;
        return false;
    }
    public static void main(String[] args) {
        int mat[][]=new int[][]
          {{9,0,0,1,0,0,0,0,5},
                {0,0,5,0,9,0,2,0,1},
                {8,0,0,0,4,0,0,0,0},
                {0,0,0,0,8,0,0,0,0},
                {0,0,0,7,0,0,0,0,0},
                {0,0,0,0,2,6,0,0,9},
                {2,0,0,3,0,0,0,0,6},
                {0,0,0,2,0,0,9,0,0},
                {0,0,1,9,0,4,5,7,0},};
        int n=mat.length;

        solvesudoko(mat,0,0,n);


    }
}

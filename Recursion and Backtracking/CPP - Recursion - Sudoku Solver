
package com.company;
import java.util.ArrayList;
import java.util.Scanner;

public class Main {

    static Boolean canPlace(int mat[][],int i,int j,int n,int number){
        for(int x= 0;x<n;x++){
            //Row and coloumn check
            if(mat[x][j]==number||mat[i][x]==number){
                return false;
            }
        }
        int rn =(int)Math.sqrt(n);
        int sx=(i/rn)*rn;
        int sy=(j/rn)*rn;

        for(int x=sx;x<sx+rn;x++){
            for(int y =sy;y<sy+rn;y++){
                if(mat[x][y]==number){
                    return false;
                }
            }
        }
        return true;
    }
    static Boolean solveSudoko(int mat[][],int i,int j,int n){
        //BAse case
        //reach at the last row
        if(i==n){
            //print the matrix
            for( i=0;i<n;i++){
                for(j=0;j<n;j++){
                    System.out.print(mat[i][j] +" ");
                }
                System.out.println();
            }
            return true;
        }
        //case row end
        if(j==n){
            return solveSudoko(mat,i+1,0,n);

        }
        //skip the prefilled cells
        if(mat[i][j]!=0){
            return solveSudoko(mat,i,j+1,n);
        }
        //Rec case
        //Fill the current cell with possible options
        for(int number=1;number<=n;number++){
            if(canPlace(mat,i,j,n,number)){
                //Assume
                mat[i][j]=number;

                Boolean couldWeSolve=solveSudoko(mat,i,j+1,n);
                if(couldWeSolve==true){
                    return true;
                }
            }
        }
        //Backtrack
        mat[i][j]=0;
        return false;
    }

    public static void main(String[] args) {
        int[][] mat = {{9,0,0,1,0,0,0,0,5},
                {0,0,5,0,9,0,2,0,1},
                {8,0,0,0,4,0,0,0,0},
                {0,0,0,0,8,0,0,0,0},
                {0,0,0,7,0,0,0,0,0},
                {0,0,0,0,2,6,0,0,9},
                {2,0,0,3,0,0,0,0,6},
                {0,0,0,2,0,0,9,0,0},
                {0,0,1,9,0,4,5,7,0},};


       /* Scanner sc = new Scanner(System.in);
        int[][] mat = new int[9][9];
        for(int i =0;i<9;i++){
            for(int j=0;j<9;j++){
                mat[i][j]=sc.nextInt();

                {{6,1,5,0,0,0,0,0,9},
                {0,2,4,0,0,9,0,0,0},
                {7,0,0,0,0,1,2,3,5},
                {0,0,0,4, 1,0,7,8,0},
                {4,0,0,8,0,0,6,1,2},
                {0,0,1,3,0,0,0,9,0},
                {0,8,1,3,0,0,0,9,0},
                {0,6,0,5,0,7,9,0,0},
                {0,4,7,9,2,0,3,0,6},};
            }
        }
*/
        solveSudoko(mat, 0, 0, 9);



    }
}

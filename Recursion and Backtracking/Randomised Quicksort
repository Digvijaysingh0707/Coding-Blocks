//After using shuffle function in randomied quicksort it complexity becomes nlogn

package Recursion;
import java.util.Random;

public class RandimisedQuicksort {

//        // create instance of Random class
//        Random rand = new Random();
//
//        // Generate random integers in range 0 to 999
//        int rand_int1 = rand.nextInt(1000);
//        int rand_int2 = rand.nextInt(1000);
//
//        // Print random integers
//        System.out.println("Random Integers: "+rand_int1);
//        System.out.println("Random Integers: "+rand_int2);
//
//        // Generate Random doubles
//        double rand_dub1 = rand.nextDouble();
//        double rand_dub2 = rand.nextDouble();
//
//        // Print random doubles
//        System.out.println("Random Doubles: "+rand_dub1);
//        System.out.println("Random Doubles: "+rand_dub2);
    static void shuffle(int a[],int s,int e){
        int i,j;
        Random rand= new Random();
        for (i=e;i>0;i--){
            //create one random index
            j=rand.nextInt(i+1);
            int temp=a[i];
            a[i]=a[j];
            a[j]=temp;

        }
    }
static int partition(int a[],int s,int e){
    int i=s-1;
    int j=s;
    int pivot=a[e];
    for (;j<e;j++){
        if (a[j]<=pivot){
            i++;
            int temp=a[i];
            a[i]=a[j];
            a[j]=temp;
        }


    }
        int temp=a[i+1];
        a[i+1]=a[j];
        a[j]=temp;
    return i+1;
}
    static void QuickSort(int a[],int s,int e){
        //base case
        if (s>=e)return;
        int p=partition(a,s,e);
        //left case
        QuickSort(a,s,p-1);
        //Right part
        QuickSort(a,p+1,e);
    }
    public static void main(String[] args) {
        int a[]={1,2,3,4,5};
        int n=a.length;
        shuffle(a,0,n-1);
        for (int i=0;i<n;i++){
            System.out.print(a[i]+" ");
        }
        System.out.println();
        QuickSort(a,0,n-1);
        for (int i=0;i<n;i++){
            System.out.print(a[i]+" ");
        }


    }


}

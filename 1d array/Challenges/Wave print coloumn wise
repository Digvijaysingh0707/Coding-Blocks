package com.company;

import java.util.LinkedList;
import java.util.Queue;
import java.util.Scanner;
import java.util.Stack;

public class Main {
static Stack<Integer> s= new Stack<>();
static Stack<Integer> s2= new Stack<>();
static void enqueue(int x){
    while (!s.isEmpty()){
        s2.push(s.pop());
    }
    s.push(x);
    while (!s2.isEmpty()){
        s.push(s2.pop());
    }
}
static int dequeue(){
    if (s.isEmpty()){
        System.out.println("Q is empty");
        System.exit(0);
    }
    int x=s.peek();
    s.pop();
    return x;
}

    public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int m =sc.nextInt();
    int n=sc.nextInt();
    int a[][]= new int[m][n];
    for (int i=0;i<m;i++){
        for (int j=0;j<n;j++){
            a[i][j]=sc.nextInt();
        }
    }
        //for odd columns printing elements of rows from max row to min row
//for even columns printing elements of rows from min row to max row
//Thus forming a wave pattern.


    for (int col=0;col<n;col++){
        if (col%2==0){//even coloumn
            for (int i=0;i<m;i++){
                System.out.print(a[i][col]+", ");
            }
        }
        else{
            //for odd column
            for (int i=m-1;i>=0;i--){
                System.out.print(a[i][col]+", ");
            }
        }
    }
        System.out.print("END");

    }
}

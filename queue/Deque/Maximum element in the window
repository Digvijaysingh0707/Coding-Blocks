import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.*;
public class Main {
    public static void main(String[] args) { 
        FastScanner sc=new FastScanner();
      int n=sc.nextInt();
      int a[]=sc.readArray((int)1e6);
      int k=sc.nextInt();
      //we have to process the first k elements
        Deque<Integer> deque= new ArrayDeque<>(k);
        int i;
        for ( i=0;i<k;i++){
            while (!deque.isEmpty()&&(a[i]>a[deque.getLast()])){
                deque.removeLast();
            }
            deque.addLast(i);
        }
        //process the remaining elements
        for ( i=0;i<n;i++){
            System.out.print(a[deque.getFirst()]+" ");
        }
        //1.remove the elememt which are not the part of window(contraction)
        while (!deque.isEmpty()&&(deque.getFirst()<=(i-k))){
            deque.removeLast();
        }
        //2.Remove the elemets which ar not useful and are in window
        while (!deque.isEmpty()&&a[i]>=a[deque.getLast()]){
            deque.removeLast();
        }

        //3 Add the new elements(expansion)
        deque.addLast(i);
        System.out.println(deque.getFirst());
            }

    static void sort(int[] a) {
        ArrayList<Integer> l=new ArrayList<>();
        for (int i:a) l.add(i);
        Collections.sort(l);
        for (int i=0; i<a.length; i++) a[i]=l.get(i);
    }

    static class FastScanner {
        BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st=new StringTokenizer("");
        String next() {
            while (!st.hasMoreTokens())
                try {
                    st=new StringTokenizer(br.readLine());
                } catch (IOException e) {
                    e.printStackTrace();
                }
            return st.nextToken();
        }

        int nextInt() {
            return Integer.parseInt(next());
        }
        int[] readArray(int n) {
            int[] a=new int[n];
            for (int i=0; i<n; i++) a[i]=nextInt();
            return a;
        }
        long nextLong() {
            return Long.parseLong(next());
        }
    }


}

First sort the given array
the pick last lement and firdt element to print in wave form
but this will not be very efficient


Another approach:
Swap the adjacent element to create peak and depression


#include<iostream>
using namespace std;
int main(){
    int a[] = {1,3,4,2,7,8,5,9,36};
    int n = sizeof(a)/sizeof(int);
    for(int i = 0;i<n;i+=2){
            //check for the left element and try to create the peak
        if(i>0&&a[i-1]>a[i]){
            swap(a[i],a[i-1]);
        }
    //check for the right element
        if(i<n-1&&a[i+1]>a[i]){
            swap(a[i],a[i+1]);
        }
    }
    for(int i =0;i<n;i++){
        cout<<a[i]<<" ";
    }
    return 0;
}

//Java code
package com.company;

import java.util.Scanner;

public class Main {

    public static void main(String[] args) {
       int arr[]= {1,7,2,1,3,5};
       int n = arr.length;
       for(int i=0;i<n;i+=2){
           if(i>0&&arr[i-1]>arr[i]){
               int temp=arr[i-1];
               arr[i-1]=arr[i];
               arr[i]=temp;
           }
           if(i<n-1&&arr[i+1]>arr[i]){
               int temp=arr[i+1];
               arr[i+1]=arr[i];
               arr[i]=temp;
           }
       }
       for(int e:arr){
           System.out.print(e);
       }
    }
}


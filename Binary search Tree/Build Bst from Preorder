
O(n*n) time
space O(n)


package BST;
class Node{
    int key;
    Node left;
    Node right;
    Node(int key){
        this.key=key;
    }
}
public class BuildBStFromPre {
    static void inorder(Node root){
        if (root==null)return;
        inorder(root.left);
        System.out.print(root.key+",");
        inorder(root.right);
    }
    static Node BuildBst(int preorder[],int start,int end){
        if (start>end)return null;
        Node node = new Node(preorder[start]);
        int i;
        for (i=start;i<=end;i++){
            if (preorder[i]>node.key){
                break;
            }
        }
        node.left=BuildBst(preorder,start+1,i-1);
        node.right=BuildBst(preorder,i,end);
        return node;
    }

    public static void main(String[] args) {
        int preorder[]={15,10,8,12,20,16,25};
        Node root=BuildBst(preorder,0,preorder.length-1);
        inorder(root);
    }


}



O(n) approach

package BST;

import java.util.concurrent.atomic.AtomicInteger;

class Node{
    int key;
    Node left;
    Node right;
    Node(int key){
        this.key=key;
    }
}
public class BuildBStFromPre {
    static void inorder(Node root) {
        if (root == null) return;
        inorder(root.left);
        System.out.print(root.key + ",");
        inorder(root.right);
    }
    static Node BuildTree(int preorder[], AtomicInteger pIndex,int min,int max){
        //Base case
        if (pIndex.get()==preorder.length){
            return null;
        }
        int val= preorder[pIndex.get()];
        if (val<min||val>max){
            return null;
        }
        Node root = new Node(val);
        pIndex.incrementAndGet();

        root.left=BuildTree(preorder,pIndex,min,val-1);
        root.right=BuildTree(preorder,pIndex,val,max);
        return root;
    }
    static Node BuildTree(int preorder[]){
        AtomicInteger pIndex= new AtomicInteger(0);
        return BuildTree(preorder,pIndex,Integer.MIN_VALUE,Integer.MAX_VALUE);
    }

    public static void main(String[] args)
    {
		
        int[] preorder = { 15, 10, 8, 12, 20, 16, 25 };

        // construct the BST
        Node root = BuildTree(preorder);

        // print the BST
        System.out.print("Inorder Traversal of BST is: ");

        // inorder on the BST always returns a sorted sequence
        inorder(root);
    }
}

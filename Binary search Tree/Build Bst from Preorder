
O(n*n) time
space O(n)


package BST;
class Node{
    int key;
    Node left;
    Node right;
    Node(int key){
        this.key=key;
    }
}
public class BuildBStFromPre {
    static void inorder(Node root){
        if (root==null)return;
        inorder(root.left);
        System.out.print(root.key+",");
        inorder(root.right);
    }
    static Node BuildBst(int preorder[],int start,int end){
        if (start>end)return null;
        Node node = new Node(preorder[start]);
        int i;
        for (i=start;i<=end;i++){
            if (preorder[i]>node.key){
                break;
            }
        }
        node.left=BuildBst(preorder,start+1,i-1);
        node.right=BuildBst(preorder,i,end);
        return node;
    }

    public static void main(String[] args) {
        int preorder[]={15,10,8,12,20,16,25};
        Node root=BuildBst(preorder,0,preorder.length-1);
        inorder(root);
    }


}



O(n) approach

class Solution {
    
     public TreeNode bstFromPreorder(int[] preorder) {
        return helper(preorder, 0, preorder.length);
        
    }
    
    public TreeNode helper(int[] preorder, int rootindex, int right)
    {        
        if(rootindex >= right) return null;
        
        int value = preorder[rootindex];
        TreeNode root = new TreeNode(value);
        
        int i = rootindex+1;
	    while(i <= preorder.length-1 && preorder[i] < value)
        {
            i++;
        }
        root.left = helper(preorder, rootindex+1, i);
        root.right = helper(preorder,i, right);
        
        return root;        
    }
}

class Solution {
    static boolean Valid_Moves(int x,int y,int n){
        if (x>=0&&x<n&&y>=0&&y<n)return true;
        return false;
    }
    public static double knightProbability(int N, int K, int r, int c) {

        double curr[][]= new double[N][N];
        double next[][]=new double[N][N];
        curr[r][c]=1;
        for (int moves=1;moves<=K;moves++){
            for (int i=0;i<N;i++){
                for (int j=0;j<N;j++){
                    if (curr[i][j]!=0){
                        int x=0,y=0;
                        x=i-2;
                        y=j+1;
                        if (Valid_Moves(x,y,N)){
                            next[x][y]+=curr[i][j]/8.0;
                        }
                        x=i-2;
                        y=j-1;
                        if (Valid_Moves(x,y,N)){
                            next[x][y]+=curr[i][j]/8.0;
                        }
                        x=i-1;
                        y=j+2;
                        if (Valid_Moves(x,y,N)){
                            next[x][y]+=curr[i][j]/8.0;
                        }
                        x=i-1;
                        y=j-2;
                        if (Valid_Moves(x,y,N)){
                            next[x][y]+=curr[i][j]/8.0;
                        }
                        x=i+2;
                        y=j+1;
                        if (Valid_Moves(x,y,N)){
                            next[x][y]+=curr[i][j]/8.0;
                        }
                        x=i+2;
                        y=j-1;
                        if (Valid_Moves(x,y,N)){
                            next[x][y]+=curr[i][j]/8.0;
                        }

                        x=i+1;
                        y=j-2;
                        if (Valid_Moves(x,y,N)){
                            next[x][y]+=curr[i][j]/8.0;
                        }
                        x=i+1;
                        y=j+2;
                        if (Valid_Moves(x,y,N)){
                            next[x][y]+=curr[i][j]/8.0;
                        }

                    }
                }

            }
            curr=next;
            next=new double[N][N];
        }
        double sum=0;
        for (int i=0;i<N;i++){
            for (int j=0;j<N;j++){
                sum+=curr[i][j];
            }
        }
        return sum;
    }
}

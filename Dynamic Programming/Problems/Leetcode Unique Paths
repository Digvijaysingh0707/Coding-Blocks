//Recursive sol
class Solution {
    public int uniquePaths(int m, int n) {
        if(m==1||n==1)return 1;
        return uniquePaths(m-1,n)+uniquePaths(m,n-1);
        
        
    }
}

---------------------------------------------------------------------------------------------
//Top down:-
class Solution {
    static int dp[][]= new int[105][105];
    public int uniquePaths(int m, int n) {
        if(m==1||n==1)return 1;
        if(dp[n][m]!=0)return dp[n][m];
        return dp[n][m]=uniquePaths(m-1,n)+uniquePaths(m,n-1);
        }
        }
_______________________________________________________________________________________________
//Bottom up
class Solution {
    public int uniquePaths(int m, int n) {
    
        int dp[][]= new int[n][m];
        for(int i=0;i<n;i++){
            dp[i][0]=1;
        }
        for(int i=0;i<m;i++){
            dp[0][i]=1;
        }
        for(int i=1;i<n;i++){
            for(int j=1;j<m;j++){
                dp[i][j]=dp[i-1][j]+dp[i][j-1];
            }
        }
        return dp[n-1][m-1];
        
    }
}
_______________________________________________________________________________________________________
//Using combination
//TC:-O(n-1)||O(m-1)

class Solution {

    public int uniquePaths(int m, int n) {
        int N=n+m-2;
        int r=m-1;
        long ans=1;
        for(int i=1;i<=r;i++){
            ans=ans*(N-r+i)/i;
        }
        return (int)ans;
        
    }
}

package DP;

import java.util.Arrays;
import java.util.Scanner;
//Time complexity is O(n*k)
//space complexity is O(n)
public class LadderProblem {
    
    static int BottomUp(int n,int k){
        int dp[]= new int[100];
        Arrays.fill(dp,0);
        dp[0]=1;//start case
        for (int i=1;i<=n;i++){
            //sum previous k states
            dp[i]=0;
            for (int j=1;j<=k;j++){
                if (i-j>=0){
                    dp[i]+=dp[i-j];
                }
            }
        }
        //see the bottom up table
        for (int i=0;i<=n;i++){
            System.out.print(dp[i]+" ");
//            System.out.println();
        }
        return dp[n];
    }

    public static void main(String[] args) {
        Scanner s= new Scanner(System.in);
        int n=s.nextInt();
        int k=s.nextInt();

       
       System.out.println(BottomUp(n,k));
    }
}

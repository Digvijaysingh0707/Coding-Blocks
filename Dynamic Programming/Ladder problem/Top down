package DP;

import java.util.Arrays;
import java.util.Scanner;
//Time complexity is O(n*k)
//space complexity is O(n)
public class LadderProblem {
    static int ladderTopDown(int n,int k,int dp[]){
        //Base case
        if (n==0)return 1;
        if (dp[n]!=0)return dp[n];
        //recur
        int ways=0;
        for (int i=1;i<=k;i++){
            if (n-i>=0) {//dont calculate for negative value of n
                ways += ladderTopDown(n - i, k, dp);
            }
        }
        return dp[n]=ways;
    }

    public static void main(String[] args) {
        Scanner s= new Scanner(System.in);
        int n=s.nextInt();
        int k=s.nextInt();
        int dp[]= new int[100];
        Arrays.fill(dp,0);
        System.out.println(ladderTopDown(n,k,dp));
    }
}

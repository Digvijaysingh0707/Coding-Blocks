//Bottom up
class Knapsack 
{ 
    // Returns the maximum value that can be put in a knapsack of capacity W 
    static int helper(int W, int wt[], int val[], int n,int dp[][])
    {
        
        if(n<=0||W==0)return 0;
        if(dp[n][W]!=-1)return dp[n][W];
        if(W>=wt[n-1]){
            return dp[n][W]=Math.max(helper(W-wt[n-1],wt,val,n-1,dp)+val[n-1],helper(W,wt,val,n-1,dp));
        }
        
        return dp[n][W]=helper(W,wt,val,n-1,dp);
        
    }
    static int knapSack(int W, int wt[], int val[], int n)
    {
        int dp[][]= new int[n+1][W+1];
        for(int i[]:dp){
            Arrays.fill(i,-1);
        }
        return helper(W,wt,val,n,dp);
        
    }
}

_______________________________________________________________________________________________________________
//Top down
class Knapsack
    {
        
        static int knapSack(int W, int wt[], int val[], int n)
        {

            int mat[][]= new int[n+1][W+1];
            //Initialization
            for (int i=0;i<=n;i++){
                for (int j=0;j<=W;j++){
                    if (i==0||j==0){
                        mat[i][j]=0;
                    }
                }
            }
            for (int i=1;i<=n;i++){
                for (int j=1;j<=W;j++){
                    if (wt[i-1]<=j){
                        mat[i][j]=Math.max(val[i-1]+mat[i-1][j-wt[i-1]],mat[i-1][j]);
                    }
                    else{
                        mat[i][j]=mat[i-1][j];
                    }
                }
            }
            return mat[n][W];

        }
    


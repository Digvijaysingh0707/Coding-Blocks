//2^n without dp
package DP;

public class LongestCommonSubsequence {
    static int lcs(char[] x,char[] y){
        int m=x.length;
        int n=y.length;
        int dp[][]= new int[100][100];
        for (int i=0;i<=m;i++)dp[i][0]=0;//fill first coloumn with 0

        for (int j=0;j<=n;j++)dp[0][j]=0;//fill first row with 0
        for (int i=1;i<=m;i++){
            for (int j=1;j<=n;j++){
                int q=0;
                if (x[i-1]==y[j-1]){//why -1 because i , j is wrt to dp table(matrix) see notes
                    q=1+dp[i-1][j-1];
                }
                else {
                    q=Math.max(dp[i-1][j],dp[i][j-1]);
                }
                dp[i][j]=q;
            }
        }
return dp[m][n];
    }

    public static void main(String[] args) {
        char x[]={'n','e','m','a','t','o','d','e'};
        char y[]={'e','m','p','t','y'};
        System.out.println(lcs(x,y));
    }
}

_________________________________________________________________________________________________________________________________
//O(n) space
static int spaceOptimisedLCs(String a,String b){
            int n=a.length(),m=b.length();
            int min=Math.min(n,m);
            int max=Math.max(n,m);
            int dp[][]= new int[2][min+1];
            int sign=0;
            for (int i=0;i<=max;i++ ){
                sign=sign&i;
                for (int j=0;j<=min;j++){
                    if (i==0||j==0){
                        dp[sign][j]=0;
                    }
                    else if (a.charAt(i-1)==b.charAt(j-1)){
                        dp[sign][j]=dp[1-sign][j-1]+1;
                    }
                    else{
                        dp[sign][j]=Math.min(dp[1-sign][j],dp[sign][j-1]);
                    }
                }

            }
            return dp[sign][min];
        }

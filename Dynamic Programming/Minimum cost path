Complexity is O(m*n)


package DP;

import java.lang.reflect.Array;
import java.util.Arrays;



public class MinimumCostProblem {
//    static int minCost(int cost[][],int R,int C){
//        int dp[][]= new int[R][C];
////        Arrays.fill(dp,0);
//        for (int i=0;i<R;i++){
//            for (int j=0;j<C;j++){
//                if (i==0&&j==0){
//                    dp[i][j]=cost[0][0];
//                }
//                if (i==0){
//                    dp[i][j]=dp[0][j-1]+cost[0][j];
//                }
//                if (j==0){
//                    dp[i][j]=dp[i-1][0]+cost[i][0];
//                }
//                else{
//                    dp[i][j]=Math.min(dp[i-1][j-1],Math.min(dp[i-1][j],dp[i][j-1]))+cost[i][j];
//                }
//            }
//        }
//        return dp[R-1][C-1];
//    }
private static int min(int x, int y, int z)
{
    if (x < y)
        return (x < z)? x : z;
    else
        return (y < z)? y : z;
}
private static int minCost(int cost[][], int m, int n)
{
    int i, j;
    int tc[][]=new int[m+1][n+1];

    tc[0][0] = cost[0][0];

    /* Initialize first column of total cost(tc) array */
    for (i = 1; i <= m; i++)
        tc[i][0] = tc[i-1][0] + cost[i][0];

    /* Initialize first row of tc array */
    for (j = 1; j <= n; j++)
        tc[0][j] = tc[0][j-1] + cost[0][j];

    /* Construct rest of the tc array */
    for (i = 1; i <= m; i++)
        for (j = 1; j <= n; j++)
            tc[i][j] = min(tc[i-1][j-1],
                    tc[i-1][j],
                    tc[i][j-1]) + cost[i][j];

    return tc[m][n];
}

    public static void main(String[] args) {
        int cost[][]= {{1, 2, 3},
                {4, 8, 2},
                {1, 5, 3}};
        System.out.println(minCost(cost,2,2));

    }
}

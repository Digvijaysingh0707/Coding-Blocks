//Bottom up approach compleity O(n) both
    static int bottom(int n){
        int dp[]= new int[100];
        Arrays.fill(dp,0);
        dp[0]=0;
        dp[1]=1;
        for (int i=2;i<=n;i++){
            dp[i]=dp[i-1]+dp[i-2];
        }
        return dp[n];
    }
    //Bottom up approach with space optimisation O(1)
    static int finSpaceOPt(int n){
        if (n==0||n==1){
            return n;
        }
        int a=0;
        int b=1;
        int c=0;
        for (int i=2;i<=n;i++){
            c=a+b;
            a=b;
            b=c;
        }
        return c;
    }

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int dp[]= new int[100];
        int n=sc.nextInt();
        Arrays.fill(dp,0);
        System.out.println(finSpaceOPt(n));

    }
}

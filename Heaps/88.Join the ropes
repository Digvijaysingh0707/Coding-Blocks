Join the minimum ropes first 
why using heaps?
it can give mini element in O(1) time

Algo:-
find the smallest ropes
find the 2nd smallest element
join them and put them back in heapjoi

import java.util.PriorityQueue;

public class JoinRopes {
    static int ropes(int ropes[],int n){
        PriorityQueue<Integer> pq= new PriorityQueue<>();
        for (int i=0;i<n;i++){
            pq.add(ropes[i]);
        }
        int cost=0;

        while (pq.size()>1){
            int A=pq.peek();
            pq.poll();
            int B=pq.peek();
            pq.poll();
            int newRope=(A+B);
            cost+=newRope;
            pq.add(newRope);
        }
        return cost;
    }
    public static void main(String[] args) {
int ropes[]={4,3,2,6};
int n=ropes.length;
        System.out.println(ropes(ropes,n));
    }
}

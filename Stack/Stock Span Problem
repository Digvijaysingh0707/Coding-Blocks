algorithm:-
for(day(0-n)
while(s.top)<curPrice) pop 
compute the span
push the current day into the stack

// by stack O(N)
     import java.util.*;
    public class Main {
        static void find(int prices[],int n,int span[]){
            span[0]=1;
            Stack<Integer> s= new Stack<>();
            s.push(0);
            for (int i=1;i<n;i++){
                int currentPrice=prices[i];
                while (!s.isEmpty()&&prices[s.peek()]<=prices[i]){
                    s.pop();
                }
                if (!s.isEmpty()){
                    int previous_Highest=s.peek();
                    span[i]=i-previous_Highest;
                }
                else span[i]=i+1;
                s.push(i);
            }
        }

        public static void main(String[] args) {
            Scanner sc = new Scanner(System.in);
           int a[]={100,80,60,70,60,75,85};
           int n=a.length;
           int span[]= new int[n];
           Arrays.fill(span,0);
           find(a,n,span);
           for (int i=0;i<n;i++){
               System.out.print(span[i]+" ");
           }
        }
    }
 

import java.util.List;
import java.util.Stack;


public class LinkedList {
    static void transfer(stack s1,stack s2,int n){
        for(int i=0;i<n;i++){
            s2.push(s1.top);
            s1.pop();
        }
    }
    static void  reverseStack(Stacks s1){
        stack  s2;
        int n =s1.size();
        for(int i =0;i<n;i++){
            int x =s1.top;
            s1.pop();
            transfer(s1,s2,n-i-1);
            s1.push(x);
            transfer(s2,s1,n-i-1);
        }
    }


    public static void main(String[] args) {
        Stacks s = new Stacks();
        s.push(1);
        s.push(2);
        s.push(3);
        s.push(4);
        reverseStack(s);
        while(s.isEmpty()==false){
            System.out.print(s.top+" ");
            s.pop();
        }

    }
}


public class Stacks {
    int stack[] = new int[5];
    int top = 0;

    public void push(int data) {
        if(top==5){
            System.out.println("Stack is full");
        }
        stack[top] = data;
        top++;


    }
    public int pop(){
        if(isEmpty()) {
            System.out.println("Stack is empty");
        }

        int data;
        top--;
        data=stack[top];
        stack[top]=0;
        return data;
    }
    public int peek(){
        int data;
        //top--;
        data=stack[top-1];

        return data;
    }
    public int size(){
        return top;
    }
    public boolean isEmpty(){
        return top<=0;
    }
    public void show(){
        for(int n:stack){
            System.out.print(n+" ");

        }
        System.out.println();
    }
}













